digit = "0" | ... | "9";
upper case = "A" | ... | "Z";
lower case = "a" | ... | "z";
alphabet = lower case | upper case;
identifier = (alphabet | "_"), {alphabet | digit | "_"};
integer constant = "0" | (digit - "0"), {digit};
translation unit = function definition;
function definition = "int", "main", "(", "void", ")", compound statement;
additive expression = multiplicative expression, {("+" | "-"), multiplicative expression};
multiplicative expression = unary expression, {("*" | "/" | "%"), unary expression};
unary expression = {"+" | "-"}, primary expression;
primary expression = identifier | integer constant | "(", expression, ")";
expression = additive expression;
assignment expression = {identifier, "="}, additive expression;
declaration = "int", init declarator, ";";
init declarator = identifier, ["=", assignment expression];
compound statement = "{", {declaration}, {statement}, "}";
statement = compound statement | jump statement;
jump statement = "return", expression, ";";
